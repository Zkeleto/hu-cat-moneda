package com.huCatMoneda.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.huCatMoneda.entity.HuCatMoneda;
import com.huCatMoneda.entity.HuCatMonedaId;
import com.huCatMoneda.service.IHuCatMonedaService;

@RestController
@RequestMapping(path = "/api/v1/moneda")
@CrossOrigin("*")
public class HuCatMonedaWS {
	
	@Autowired
	private IHuCatMonedaService service;
	
	// http://localhost:8010/api/v1/moneda
	
	//obtener la lista de monedas
	@GetMapping
	 public ResponseEntity<?> listar() {
        List<HuCatMoneda> monedas = service.listar();
        return ResponseEntity.ok(monedas);
    }
	
	// Obtener una moneda a trav√©s de la llave compuesta
	@GetMapping("/{numCia}/{claveMoneda}")
	public ResponseEntity<HuCatMoneda> obtenerMoneda(@PathVariable int numCia, @PathVariable String claveMoneda) {
		claveMoneda = claveMoneda.toUpperCase();
	    HuCatMonedaId id = new HuCatMonedaId(numCia, claveMoneda);
	    Optional<HuCatMoneda> moneda = service.obtenerPorId(id);
	    return moneda.map(ResponseEntity::ok).orElse(ResponseEntity.notFound().build());
	}

	
	//crear una moneda
	@PostMapping
    public ResponseEntity<HuCatMoneda> crearMoneda(@RequestBody HuCatMoneda moneda) {
		 try {
		        HuCatMoneda nuevaMoneda = service.guardar(moneda);
		        return ResponseEntity.status(HttpStatus.CREATED).body(nuevaMoneda);
		    } catch (Exception e) {
		        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);
		    }
    }
	
	// actualizar una moneda
	 @PutMapping("/{numCia}/{claveMoneda}")
	    public ResponseEntity<HuCatMoneda> actualizarMoneda(@PathVariable int numCia, @PathVariable String claveMoneda, @RequestBody HuCatMoneda moneda) {
	        HuCatMonedaId id = new HuCatMonedaId(numCia, claveMoneda);
	        Optional<HuCatMoneda> monedaExistente = service.editar(moneda);

	        if (monedaExistente.isPresent()) {
	            HuCatMoneda monedaActualizada = service.guardar(moneda);
	            return ResponseEntity.ok(monedaActualizada);
	        } else {
	            return ResponseEntity.notFound().build();
	        }
	    }
	 
	 // eliminar una moneda por la llave compuesta 
	 @DeleteMapping("/{numCia}/{claveMoneda}")
	    public ResponseEntity<Void> eliminarMoneda(@PathVariable int numCia, @PathVariable String claveMoneda) {
	        HuCatMonedaId id = new HuCatMonedaId(numCia, claveMoneda);
	        try {
	            service.eliminar(id);
	            return ResponseEntity.noContent().build();
	        } catch (Exception e) {
	            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
	        }
	    }
}
